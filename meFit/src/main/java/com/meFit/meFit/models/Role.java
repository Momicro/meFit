package com.meFit.meFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "Role")
@ApiModel(description = "Role Model")
public @Data class Role {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID from the user", name = "id", value = "1" )
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model

    @ApiModelProperty(notes = "name", name = "name", value = "someone"  )
    @Column(name="name",
            nullable = false,
            columnDefinition = "TEXT")
    private String name;

    private enum Roles {USER, CONTRIBUTER, ADMIN};

    //related data
    //role - userRight - relation
    @ApiModelProperty(notes = "The role ID the userRight relates to", name = "role ID" )
    @OneToMany
    @JoinColumn(name = "role_id")
    private Set<UserRight> userRights = new HashSet<>();

    // restricts the output to a List of IDs of the userrights
    @JsonGetter("userRights")
    public List<String> userRights() {
        if(userRights != null) {
            return userRights.stream()
                    .map(userRight -> {
                        return "/api/v1/userRights/" + userRight.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }

}
