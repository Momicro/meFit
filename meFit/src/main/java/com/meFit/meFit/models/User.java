package com.meFit.meFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "User")
@ApiModel(description = "User Model")
public @Data class User {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID from the user", name = "id", value = "1" )
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model

    @ApiModelProperty(notes = "First name from the user", name = "first name", value = "Mohammed"  )
    @Column(name="firstName",
            nullable = false,
            columnDefinition = "TEXT")
    private String firstName;

    @ApiModelProperty(notes = "Last name from the user", name = "last name", value = "Yones"  )
    @Column(name="lastName",
            nullable = false,
            columnDefinition = "TEXT")
    private String lastName;

    @ApiModelProperty(notes = "Email address from the user", name = "email address", value = "Mohammed@noweb.com"  )
    @Column(name="email",
            nullable = false,
            columnDefinition = "TEXT")
    private String email;

    @ApiModelProperty(notes = "User password", name = "password", value = "12345"  )
    @Column(name="password",
            nullable = false,
            columnDefinition = "TEXT")
    private String password;

    //related data
    //user - role - relation
    @ApiModelProperty(notes = "The User ID the role relates to", name = "user ID" )
    @OneToMany
    @JoinColumn(name = "user_id")
    private Set<Role> roles = new HashSet<>();

    // restricts the output to a List of IDs of the movies
    @JsonGetter("roles")
    public List<String> roles() {
        if(roles != null) {
            return roles.stream()
                    .map(role -> {
                        return "/api/v1/roles/" + role.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }

    //Constructors

    //Getters and Setters

}
