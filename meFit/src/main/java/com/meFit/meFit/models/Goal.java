package com.meFit.meFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "Goal")
@ApiModel(description = "Goal Model")
public @Data class Goal {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID of the user goal", name = "id", value = "1" )
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model
    @ApiModelProperty(notes = "start date", name = "startDate", value = "something"  )
    @Column(name="startDate",
            nullable = false,
            columnDefinition = "DATE")
    private Date startDate;

    @ApiModelProperty(notes = "end date", name = "endDate", value = "something"  )
    @Column(name="endDate",
            nullable = false,
            columnDefinition = "DATE")
    private Date endDate;

    @ApiModelProperty(notes = "archived", name = "archived", value = "yes"  )
    @Column(name="archived",
            nullable = false,
            columnDefinition = "TEXT")
    private boolean archived;

    //related data
    //goal - programs - relation
    @ApiModelProperty(notes = "The goal ID the program relates to", name = "goal ID" )
    @OneToMany
    @JoinColumn(name = "gaol_id")
    private Set<Program> programs = new HashSet<>();

    // restricts the output to a List of IDs of the programs
    @JsonGetter("program")
    public List<String> programs() {
        if(programs != null) {
            return programs.stream()
                    .map(program -> {
                        return "/api/v1/programs/" + program.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }

    //related data
    //goal - workouts - relation
    @ApiModelProperty(notes = "The goal ID the workouts relates to", name = "goal ID" )
    @OneToMany
    @JoinColumn(name = "goal_id")
    private Set<Workout> workouts = new HashSet<>();

    // restricts the output to a List of IDs of the workouts
    @JsonGetter("userRights")
    public List<String> workouts() {
        if(workouts != null) {
            return workouts.stream()
                    .map(workout -> {
                        return "/api/v1/workouts/" + workout.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }

}
