package com.meFit.meFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "Exercise")
@ApiModel(description = "Exercise Model")
public @Data class Exercise {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID of the exercise", name = "id", value = "1" )
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model
    @ApiModelProperty(notes = "name", name = "name", value = "something"  )
    @Column(name="name",
            nullable = false,
            columnDefinition = "TEXT")
    private String name;

    @ApiModelProperty(notes = "description", name = "description", value = "something"  )
    @Column(name="description",
            nullable = false,
            columnDefinition = "TEXT")
    private String description;

    //related data
    //workout - exercise - relation
    @ApiModelProperty(notes = "The workout ID the exercise relates to", name = "workout ID" )
    @ManyToOne(cascade = {/*CascadeType.ALL, */CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH})
    @JoinColumn(name="workout_id")
    private Workout workout;

    //restricts the output to the workout ID
    @JsonGetter("workout")
    public String workout() {
        if(workout != null){
            return "/api/v1/workout/" + workout.getId();
        }else{
            return null;
        }
    }

    //related data
    //exercise - muscleGroup - relation
    @ApiModelProperty(notes = "List of muscleGroup in the exercise", name = "muscleGrouplist" )
    @OneToMany(cascade = {/*CascadeType.ALL, */CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH}, mappedBy="exercise")
    public Set<MuscleGroup> muscleGroups = new HashSet<>();

    // restricts the output to a List of IDs of the muscleGroups
    @JsonGetter("muscleGroups")
    public List<String> muscleGroups() {
        if(muscleGroups != null) {
            return muscleGroups.stream()
                    .map(muscleGroup -> {
                        return "/api/v1/muscleGroups/" + muscleGroup.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }
}
